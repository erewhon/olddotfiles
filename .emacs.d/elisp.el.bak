  (message "Starting elisp.org.   The adventure begins!")

  (setq warning-suppress-types nil)

;; Bootstrap 'use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)

;; Force use-package to always fetch packages.
(setq use-package-always-ensure t)

;; Hide minor modes!
(use-package diminish)

;; Better package manager.  Shows Github star ratings!!
(use-package paradox
  :defer 5
  :config
  (setq paradox-automatically-star t)
  (setq paradox-github-token "314c9b4fcc85400e10213b4f976f55a944412401"))

;; todo:
;; - groovy
;; - gradle

(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

;; (require 'unicode-fonts)
;; (unicode-fonts-setup)

(require 'helm-config)
(helm-mode 1)

(eval-after-load "helm-config" '(diminish 'helm-mode))

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)

(use-package focus
  :bind ("C-c f" . focus-mode))

;; will have to see if I like the Golden Ratio...
;;   (I don't think so.  Ended up uninstalling 2020/02/17)
;; (use-package golden-ratio
;;   :defer t
;;   :config
;;   (setq golden-ratio-auto-scale t)
;;  (golden-ratio-mode 1))

;; resize frames on pixel, not character, boundaries
(setq frame-resize-pixelwise t)
(pixel-scroll-mode 1)     ;; pixel scroll mode with scroll wheel
;;(minimap-mode -1)

;; Sublimity
;;  (require 'sublimity)
;;  (require 'sublimity-map)
;;  (require 'sublimity-attractive)
;;  (sublimity-map-set-delay nil) ;; or 0
;;  (sublimity-mode -1)

(use-package symon
  :defer t
  :config
  (symon-mode))

;; to install: svg-clock (need to rebuild Emacs with SVG support)

;;;
;; http://www.draketo.de/light/english/emacs/babcore
;; syntax highlighting everywhere

(global-font-lock-mode 1)

;; Smart mode line (https://github.com/Malabarba/smart-mode-line)

;;  (setq sml/theme 'powerline)
;;  (use-package smart-mode-line
;;    :defer t
;;    :init
;;    (sml/setup))

;; To display file name in frame title-bar>
(setq frame-title-format "Emacs - %b")

;;;
;;; Cursor bling
;;;
;; Change cursor blinking.   nil to turn off
(blink-cursor-mode t)
;; Cursor (to make consistent with terminal).  'box is default
(setq-default cursor-type 'bar)
;; Highlight line cursor is currently on
(global-hl-line-mode t)
;; show tabs (this only works if cursor-bar is 'box)
;;(setq x-stretch-cursor t)
;; beacon mode!
(use-package beacon
  :defer t
  :config
  (beacon-mode 1)
  (setq beacon-push-mark 35))
;; multiple cursors, just like 
(use-package multiple-cursors
  :bind ("C-S-c C-S-c" . mc/edit-lines))

(use-package yaml-mode
  :defer t)

(use-package org-pomodoro
  :defer t
  :bind (("C-c p" . org-pomodoro)))
(setq org-pomodoro-short-break-length 11)
(setq org-pomodoro-length 49)

;; Use alternate line number library
;;  (use-package nlinum-hl
;;    :config
;;    (require 'nlinum-hl)
;;    (global-nlinum-mode -1))

;;; Random
;; Google selected region
(use-package google-this
  :bind (("C-x C-g" . google-this-mode-submap)))

;;; Mode line fanciness
;; Turn off scroll bar.  It's fugly.
(scroll-bar-mode -1)

;;(use-package major-mode-icons
;;  :ensure t
;;  :config
;;  (major-mode-icons-mode 1))

;; https://github.com/ryuslash/mode-icons
(use-package mode-icons
  :config
  (mode-icons-mode 1))

;; https://github.com/milkypostman/powerline
;; (require 'powerline)
;; (powerline-default-theme)
;; (powerline-center-theme)
;; (powerline-nano-theme)
;; (powerline-revert)

;; https://github.com/dbordak/telephone-line
(defun my-telephone-line-customization()
  ;; Define more interesting custom colors to be used instead of accent colors.
  ;;    Since I mostly use the solarized light and dark themes, I am using some
  ;;    colors from there.   (Albeit not as intended.)
  ;;
  ;;    Specifically, I'm using accent colors as background.
  ;;    green   or cyan (#2aa198) or yellow background;
  (setq solarized-base1   "#93a1a1")
  (setq solarized-base3   "#fdf6e3")
  (setq solarized-cyan    "#2aa198")
  (setq solarized-magenta "#d33682")
  (setq solarized-violet  "#6c71c4")
  (setq solarized-blue    "#268bd2")

  (defface solarized-bar '((t (:foreground "white" :background "#2aa198"))) "")
  (setq telephone-line-faces
        '((solarized-bar . (solarized-bar . solarized-bar))
          (evil . telephone-line-evil-face)
          (accent . (telephone-line-accent-active . telephone-line-accent-inactive))
          (nil . (mode-line . mode-line-inactive))))
  
  ;;telephone-line-erc-modified-channels-segment 
  (setq telephone-line-lhs
        '((solarized-bar . (telephone-line-vc-segment))
          (accent . (telephone-line-process-segment))
          (nil    . (telephone-line-buffer-segment
                     telephone-line-airline-position-segment
                     ))))

  (setq telephone-line-rhs
        '((nil    . (telephone-line-major-mode-segment
                     telephone-line-minor-mode-segment
                     ))
          (solarized-bar . (telephone-line-misc-info-segment))))
  
  ;; Arrow separators
  (setq telephone-line-primary-left-separator 'telephone-line-abs-left
        telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left
        telephone-line-primary-right-separator 'telephone-line-abs-right
        telephone-line-secondary-right-separator 'telephone-line-abs-hollow-right)
  
  ;; S-curve separators
  ;;(setq telephone-line-primary-left-separator 'telephone-line-cubed-left
  ;;      telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
  ;;      telephone-line-primary-right-separator 'telephone-line-cubed-right
  ;;      telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
  
  (setq telephone-line-height 24
        telephone-line-evil-use-short-tag t)
  
  ;;(telephone-line-mode -1)
  (telephone-line-mode 1))

;;(use-package telephone-line
;;  :config
;;  (my-telephone-line-customization))

;; https://github.com/purcell/exec-path-from-shell
(when (memq window-system '(mac ns x))
  (use-package exec-path-from-shell
    :defer t
    :config
    (exec-path-from-shell-initialize)))


;; Variable font pitch for org mode
(defun set-buffer-variable-pitch ()
  (interactive)
  (variable-pitch-mode t)
  (setq line-spacing 3)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
                                        ;(set-face-attribute 'org-block-background nil :inherit 'fixed-pitch)
  )

;;        (add-hook 'org-mode-hook 'set-buffer-variable-pitch)
;;        (add-hook 'eww-mode-hook 'set-buffer-variable-pitch)
;;        (add-hook 'markdown-mode-hook 'set-buffer-variable-pitch)
;;        (add-hook 'Info-mode-hook 'set-buffer-variable-pitch)
;;        (add-hook 'direct-mode-hook 'set-buffer-fixed-pitch)
;;      (remove-hook 'dired-mode-hook 'set-buffer-fixed-patch)

;;
;; REST mode
;;
(use-package restclient
  :defer t)

  (message "System settings")

  (add-to-list 'exec-path "/opt/local/bin")
  (add-to-list 'exec-path "/usr/local/bin")
    
  ;;(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
  ;;    (let* ((my-bin-dir "/opt")
  ;;           (default-directory my-lisp-dir))
  ;;      (setq load-path (cons my-lisp-dir load-path))
  ;;      (normal-top-level-add-subdirs-to-load-path)))
  
  ;;
  ;; if buffer hasn't changed, and file on disk changed, revert it...
  ;;   (there are occasions where I have wanted to keep what's in buffer
  ;;   but in practice, the files are in version control...
  ;;
  (setq global-auto-revert-mode t)
  (setq auto-revert-verbose nil)

(server-start 1)                                          ;; Emacs server (so I can use emacsclient)

  (put 'set-goal-column 'disabled nil)
  (put 'narrow-to-region 'disabled nil)

  ;;
  ;; i hate the default beep, especially on hermes
  ;;
  ;;; (setq visible-bell t)

  ;;;
  ;;; Misc modes
  ;;;
  ;; (iswitchb-mode 1)                ;; iswitch buffers  ; disable for now...
  ;;(setq iswitchb-buffer-ignore '("^ " "\\*Buffer" "\\*Minibuf-" "\\*Completions"))
  ;;temp;;(show-paren-mode 1)              ;; show matching parens

  ;; Be able to edit forms from Chrome
  (use-package edit-server
    :defer t
    :config
    (edit-server-start))

  ;; COMPlete ANYthing
  (use-package company
    :defer t
    :diminish company-mode
    :config
    (add-hook 'after-init-hook 'global-company-mode))

;;  (add-hook 'after-init-hook 'global-company-mode)

  ;; see http://www.emacswiki.org/emacs/ForceBackups

  (setq delete-old-versions t)                      ;; Just silently delete old versions
  (setq vc-make-backup-files t)                     ;; Backup version controlled files

  (setq version-control t                           ;; Use version numbers for backups
        kept-new-versions 10                        ;; Number of newest versions to keep
        kept-old-versions 2                         ;; Number of oldest versions to keep
        delete-old-versions t                       ;; Ask to delete excess backup versions?
        backup-by-copying-when-linked t)            ;; Copy linked files, don't rename.

  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

  ;; ;(defun force-backup-of-buffer ()
  ;; ;  (let ((buffer-backed-up nil))
  ;; ;    (backup-buffer)))
  ;; 
  ;; ;The above function force-backup-of-buffer doesnâ€™t preserve file permissions. As an alternative, how about simply:
  ;; 
  ;;   (defun force-backup-of-buffer ()
  ;;     (setq buffer-backed-up nil))
  ;; 
  ;; (add-hook 'before-save-hook  'force-backup-of-buffer)

;; switch to aspell, since we don't have ispell...

(setq ispell-program-name "aspell")
(setq ispell-list-command "list")

;; spell checking (or turning off)
(dolist (hook '(org-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))

;;(dolist (hook '(org-mode-hook))
;;  (add-hook hook (lambda () (flyspell-mode -1))))

(use-package winner
  :defer t)

;; Visual Undo and change key bindings.  (C-z == minimize window by default!?  Rather make it undo!)
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode 1)
    (defalias 'redo 'undo-tree-redo)
    :bind
    (("C-z" . undo)
     ("C-S-Z" . redo)))

;;
;; Tweak the UI
;;
;;(use-package atom-one-dark-theme
;;  :init
;;  (load-theme 'atom-one-dark t))

(use-package nord-theme
  :init
  (load-theme 'nord t))

;;
;; check OS type, and make platform-specific changes appropriately
;;
(cond
 ((string-equal system-type "windows-nt") ; Microsoft Windows
  (progn
    (when (member "DejaVu Sans Mono" (font-family-list))
      (add-to-list 'initial-frame-alist '(font . "DejaVu Sans Mono-10"))
      (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-10")))
    (custom-set-variables '(tramp-default-method "plink" nil (tramp)))
    (message "Microsoft Windows")))
 ((string-equal system-type "darwin") ; Mac OS X
  (progn
    (setq tramp-default-method "scp")
    (setq default-frame-alist 
          '((ns-transparent-titlebar . t) 
            (ns-appearance . 'nil)))
    
    (global-set-key (kbd "M-h") 'ns-do-hide-emacs) ;; this has annoyed me for years <sigh>
    
      ;; Fira Core seems pretty solid
      ;; I will probably switch to Operator Mono at some point since all the cool kids
      ;; use it...
      ;; (set-face-attribute 'default nil :family "Fira Code")   
      ;; (set-face-attribute 'default nil :family "FuraCode Nerd Font Mono Light")
      ;; (set-face-attribute 'default nil :family "FuraCode Nerd Font Mono")
      ;; (set-face-attribute 'default nil :family "JetBrains Mono")
      (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font")
      ;; (set-face-attribute 'default nil :family "Fira Sans")
      ;; (set-face-attribute 'default nil :family "Verdana")   ;; test fonts...
      ;; (set-face-attribute 'default nil :family "Menlo")
      ;; (set-face-attribute 'default nil :family "Andale Mono")
      ;; (set-face-attribute 'default nil :family "American Typewriter")

      ;; (set-face-attribute 'default nil :height 200)
      (set-face-attribute 'default nil :height 165)
      ;;
      ;; to support ligatures!  (something I snagged from Emacs Wiki or something...)
      ;;   I had to comment out some ligatures because they brick Emacs.  <sigh>
      ;;
      (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                     (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                     (36 . ".\\(?:>\\)")
                     (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                     (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                     ;; (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                     (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                     ;; (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                     ;; (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)") ;; This might be causing Emacs to lock up
                     ;; (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                     (48 . ".\\(?:x[a-zA-Z]\\)")
                     (58 . ".\\(?:::\\|[:=]\\)")
                     (59 . ".\\(?:;;\\|;\\)")
                     (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                     (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                     (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                     (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                     (91 . ".\\(?:]\\)")
                     (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                     (94 . ".\\(?:=\\)")
                     (119 . ".\\(?:ww\\)")
                     (123 . ".\\(?:-\\)")
                     (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                     (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
                     )
                   ))
        (dolist (char-regexp alist)
          (set-char-table-range composition-function-table (car char-regexp)
                                `([,(cdr char-regexp) 0 font-shape-gstring]))))

        ;; set custom keysequences
        (setq mac-option-modifier 'alt)
        (setq mac-command-modifier 'meta)
        (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
        ;; (setq mac-option-key-is-meta t)
        ;; (setq mac-right-option-modifier nil)

      (message "Mac OS X")))
   ((string-equal system-type "gnu/linux") ; linux
    (progn
      (setq mouse-autoselect-window t
            focus-follows-mouse t)
      ;;(use-package exwm :ensure t
      ;;  :config 
      ;;  (use-package exwm-config
      ;;    :config (exwm-config-default)))
      (require 'exwm)
      (require 'exwm-config)
      (exwm-config-default)

      (require 'exwm-systemtray)
      (exwm-systemtray-enable)

      ;; (setq exwm-workspace-minibuffer-position 'bottom)
      ;; things to add:
      ;; - tiling
      ;; - char mode tweakage
      (setq exwm-input-global-keys
            `(([?\s-r] . exwm-reset)
              ([?\s-w] . exwm-workspace-switch)
              ,@(mapcar (lambda (i)
                          `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                              (interactive)
                              (exwm-workspace-switch-create ,i))))
                        (number-sequence 0 9))))

      (message "Linux"))))

;; Setting transparency; (active . inactive)
;;(set-frame-parameter (selected-frame) 'alpha '(98 . 50))  ;; barely transparent when active
;;(set-frame-parameter (selected-frame) 'alpha '(98 . 70))  ;; barely transparent when active
;;(set-frame-parameter (selected-frame) 'alpha '(98 . 85))  ;; barely transparent when active
;;(set-frame-parameter (selected-frame) 'alpha '(70 . 50))  ;; very transparent when active
;;(set-frame-parameter (selected-frame) 'alpha '(90 . 50))  ;; very transparent when active
;; (set-frame-parameter (selected-frame) 'alpha '(100 . 100))  ;; not transparent when active
;;(set-frame-parameter (selected-frame) 'alpha '(80 . 50))  ;; very transparent when active
(set-frame-parameter (selected-frame) 'alpha '(100 . 100))  ;; not transparent when active

(add-to-list 'default-frame-alist '(alpha . (98 . 50)))

(tool-bar-mode -1)
  (menu-bar-mode -1)
  (fringe-mode nil)    ;; indent of text on left and right...

  (message "Text handling")
  
  ;;;(autoload 'longlines-mode "longlines.el" "Minor mode for editing long lines." t)
  
  (text-scale-increase 1)                                   ;; text-scale-normal-size to restore
;; XXX FIX!!!
;;(global-linum-mode -1)
(global-display-line-numbers-mode 1)
;; show line numbers along side
  (setq-default indent-tabs-mode nil)                       ;; Don't EVAR use tabs!
  (setq-default tab-always=indent 'complete)

  (put 'upcase-region 'disabled nil)                        ;; I prefer being able to upcase region
  (put 'downcase-region 'disabled nil)                      ;;  and lowercase region..

  ;; M-Return goes to end of line, inserts semicolon, and inserts return
  (setq auto-indent-key-for-end-of-line-insert-char-then-newline "<M-return>")

  ;; (setq auto-indent-on-visit-file t) ;; If you want auto-indent on for files
  ;; auto-indent-untabify-on-visit-file
  ;; auto-indent-kill-remove-extra-spaces

;;  (use-package auto-indent-mode
;;      :defer t
;;      :init
;;      ;; (setq auto-indent-on-visit-file t)
;;      (auto-indent-global-mode))

(use-package yafolding :defer t)

(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))

;;  (define-obsolete-function-alias 'org-define-error 'define-error)

  (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/")
  (setq org-reveal-title-slide "<section id=\"sec-title-slide\"><h1 class=\"title\">%t</h1><h2 class=\"author\">%a</h2></section>")
  ;; <h2 class=\"email\">%e</h2>
  (use-package ox-reveal)

  (use-package org-attach-screenshot
     :bind (("\C-cs" . org-attach-screenshot))
     :config
     (setq org-attach-screenshot-command-line "myscreencapture %f"))
    
  (setq org-image-actual-width nil)

  (setq org-export-with-LaTeX-fragments t)   ;; just in case...
        
  (define-key global-map "\C-ca" 'org-agenda)
            
  (setq org-todo-keywords (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d@/!)")
                                    (sequence "WAITING(w@/!)" "SOMEDAY(s!)" "|" "CANCELLED(c@/!)" "PHONE"))))
    
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
    
    (setq org-export-email-info t)
      
    (setq org-agenda-sort-strategy
          '((agenda habit-down time-up category-up priority-down)
            (todo priority-down category-keep)
            (tags priority-down category-keep)
            (search category-keep)))
      
    (setq org-src-window-setup 'current-window)
    (setq org-clock-persist t)                ;; persist clocks
    (org-clock-persistence-insinuate)
    (setq org-clock-into-drawer t)            ;; save clocking info into drawer
    
    (setq org-log-done 'note)
      
    (setq org-agenda-include-diary t)
    
    (run-at-time "00:59" 3600 'org-save-all-org-buffers)
      
    ;; export
    (setq org-export-html-inline-images t)
            
    (setq org-startup-with-inline-images t)

    (setq org-agenda-log-mode-items (quote (clock)))
          
    (setq org-startup-indented t)

  (use-package org-bullets
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (message "Development")

  (use-package git-commit
     :defer t)

  (use-package magit
     :bind (("C-x g" . magit-status)))

  ;;
  ;; Flycheck - lightweight syntax checking.  For other languages:
  ;;
  ;;    pip install pylint
  ;;    npm install eslint -g
;;    install jsonlint
  ;;
(use-package flycheck
    :defer t
    :diminish flycheck-mode
    :config
    (global-flycheck-mode))

  ;; flycheck-clojure

  ;;
  ;; Clojure!
  ;;
  (use-package clojure-mode
    :defer t)

  ;; (require-package 'cljsbuild-mode)
  ;; (require-package 'elein)

  (use-package cider
     :defer t)

  (use-package parinfer
     :defer t
     :config
     (add-hook 'clojure-mode-hook 'parinfer-mode))

  (use-package gradle-mode
    :defer t
    :config
    (gradle-mode 1))

  ;;
  ;; Javascript!
  ;;
  (use-package js2-mode
    :defer t
    :config
    (setq js-indent-level 2)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

  ;;   (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
  ;;   (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))

;;(use-package vterm
;;    :ensure t)

;;
;; Use local build (for now) if it exists.
;;
(if (file-directory-p "~/Software/emacs-libvterm/")
  (use-package vterm
    :load-path  "~/Software/emacs-libvterm/"))

;; todo : bind vterm or eshell to key sequence

  (global-prettify-symbols-mode 1)

  (setq prettify-symbols-alist
        '(
          ("lambda" . 955) ; Î»
          ("->" . 8594)    ; â†’
          ("=>" . 8658)    ; â‡’
          ("map" . 8614)))    ; â†¦


  (defun my-add-pretty-lambda ()
    "Make some word or string show as pretty Unicode symbols."
    (setq prettify-symbols-alist
          '(
            ("lambda" . 955) ; Î»
            ("->" . 8594)    ; â†’
            ("=>" . 8658)    ; â‡’
            ("map" . 8614))))   ; â†¦


  (add-hook 'clojure-mode-hook 'my-add-pretty-lambda)
  (add-hook 'haskell-mode-hook 'my-add-pretty-lambda)
  (add-hook 'shen-mode-hook 'my-add-pretty-lambda)
  (add-hook 'tex-mode-hook 'my-add-pretty-lambda)

  ;;
  ;; Various packages
  ;;
  (use-package async
     :defer t)

  (use-package markdown-mode
     :defer t)

  (use-package go-mode :defer t)

  ;;
  ;; Other setting adjustments
  ;;
  (electric-pair-mode 1)
  (electric-indent-mode 1)
  (show-paren-mode 1)
  (column-number-mode 1)
  ;; (display-time-mode 1)    ;; This shows time, load average, and mail status.

  (message "Communications, web, networking")

  (message "Function")

  ;; deprecated
  ;;  (defun mac-toggle-max-window ()
  ;;    (interactive)
  ;;    (set-frame-parameter nil 'fullscreen (if (frame-parameter nil 'fullscreen)
  ;;                                             nil
  ;;                                           'fullboth))) 

  ;; This no longer applies...
;;(defun toggle-theme ()
  ;;  "Toggles theme between an inverted and normal theme"
  ;;  (interactive)
  ;;  (if (eq (car (car color-theme-history)) 'color-theme-midnight)
  ;;      (color-theme-standard)
  ;;    (color-theme-midnight)))

  ;;
  ;; Change the Emacs theme based on the time of day
  ;;
  ;;(setq calendar-location-name "New York, NY")
  ;;(setq calendar-latitude 40.8)
  ;;(setq calendar-longitude -73.9)
  (setq calendar-location-name "Houston, TX")
  (setq calendar-latitude 29.7)
  (setq calendar-longitude -95.3)
  (use-package theme-changer
    :defer t
    :config
    (change-theme 'material-light 'material))
    
  ;; From http://www.emacswiki.org/emacs/ParEdit
  (defvar electrify-return-match
    "[\]}\)\"]"
    "If this regexp matches the text after the cursor, do an \"electric\"
        return.")
    
  (defun electrify-return-if-match (arg)
    "If the text after the cursor matches `electrify-return-match' then
        open and indent an empty line between the cursor and the text.  Move the
        cursor to the new line."
    (interactive "P")
    (let ((case-fold-search nil))
      (if (looking-at electrify-return-match)
          (save-excursion (newline-and-indent)))
      (newline arg)
      (indent-according-to-mode)))

  ;; fires up a new frame and opens your servers in there. You will need
  ;; to modify it to suit your needs.

  ;; from http://www.emacswiki.org/emacs/ErcStartupFiles                                      
  ;; (defun my-irc ()
  ;;   "Start to waste time on IRC with ERC."
  ;;   (interactive)
  ;;   (select-frame (make-frame '((name . "Emacs IRC")
  ;;                               (minibuffer . t))))
  ;;   (call-interactively 'erc-ircnet)
  ;;   (sit-for 1)
  ;;   (call-interactively 'erc-opn)
  ;;   (sit-for 1)
  ;;   (call-interactively 'erc-ifs))

  ;; (defun shell-mode-in-new-frame ()
  ;;     (interactive)
  ;;     (select-frame (make-frame))
  ;;     (color-theme-monokai-terminal)
  ;;     (shell-mode))

  (message "Keybindings")

;; (define-key global-map [(alt return)] 'mac-toggle-max-window)
;; (define-key global-map [(alt return)] 'ns-toggle-fullscreen)
(global-set-key [(meta h)] 'ns-do-hide-emacs)
  
;;(global-set-key [f5] 'hs-toggle-hiding)
;; (global-set-key [f5] 'fold-dwim-toggle)
;; (global-set-key (kbd "<M-f5>") 'fold-dwim-hide-all)
;; (global-set-key (kbd "<S-M-f5>") 'fold-dwim-show-all)
    
;; turn off Ctrl-z ; when I run it in OSX, it minimizes the window,
;; which is never what I want...
    
;; (global-set-key "\C-z" nil)
  
;; Many years ago, I used C-\ as a prefix.  It's set to
;;   toggle-input-method in current Emacsen, which I don't use, so I
;;   will appropriate it again...
  
;; C-\ s 'eshell
;; C-\ t 'ansi-term
  
;;XXX temp disabled  (global-set-key "\C-cs" 'eshell)
;;(global-set-key "\C-ci" 'djcb-erc-start-or-switch) ;; see ERC section...
;; (global-set-key "\C-cf" 'ns-toggle-fullscreen) ;; xxx : map to alt-return
;; (global-set-key "\C-ct" 'ansi-term)

;;(global-set-key "\C-cr" 'clojure-jack-in) ;; xxx should be clojure specific...

  (message "At the end")

  ;; https://www.emacswiki.org/emacs/Desktop
  ;; to fix stale locks issue (hopefully)
  (defun sylvain/desktop-owner-advice (original &rest args)
    (let ((owner (apply original args)))
      (if (and owner (/= owner (emacs-pid)))
          (and (car (member owner (list-system-processes)))
               (let (cmd (attrlist (process-attributes owner)))
                 (if (not attrlist) owner
                   (dolist (attr attrlist)
                     (and (string= "comm" (car attr))
                          (setq cmd (car attr))))
                   (and cmd (string-match-p "[Ee]macs" cmd) owner))))
        owner)))
  ;; Ensure that dead system processes don't own it.
  ;;spb;; (advice-add #'desktop-owner :around #'sylvain/desktop-owner-advice)

  ;;
  ;; Remember desktop buffers, and save periodically
  ;;   (we run this near the end so all major modes are properly loaded...)
  ;;
  (desktop-save-mode 1)                                     ;; automatically load buffers from last session
  ;;(setq history-length 50)

  ;;(add-to-list 'desktop-globals-to-save 'file-name-history) ;; also save file history

  ;; Things not to include in desktop
  (delete 'file-name-history desktop-globals-to-save)

  (setq desktop-restore-frames nil)                         ;; Don't save frame and window configuration

  (setq desktop-restore-eager 0)                            ;; eagerly restore no buffers; lazy-load all of them

  ;;; Autosave desktop when autosaving files
  (defun my-desktop-save ()
      (interactive)
      ;; Don't call desktop-save-in-desktop-dir, as it prints a message.
      (if (eq (desktop-owner) (emacs-pid))
          (desktop-save desktop-dirname)))
  (add-hook 'auto-save-hook 'my-desktop-save)
  
  ;; (setq desktop-buffers-not-to-save
  ;;         (concat "\\("
  ;;                 "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
  ;;                 "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
  ;;                 "\\)$"))
  (add-to-list 'desktop-modes-not-to-save 'dired-mode)
  (add-to-list 'desktop-modes-not-to-save 'Info-mode)
  (add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
  (add-to-list 'desktop-modes-not-to-save 'fundamental-mode)

  ;;
  ;; Turn on midnight mode.  (By default, runs clean-buffer-list)
  ;;   See: http://www.emacswiki.org/emacs/MidnightMode
  ;;
  ;;temp;;(require 'midnight)
  ;; (midnight-delay-set 'midnight-delay "4:30am")

;;(message "My .emacs loaded in %ds" (destructuring-bind (hi lo ms ps) (current-time)
;;                           (- (+ hi lo) (+ (first *emacs-load-start*) (second *emacs-load-start*)))))

(defun startup-time() 
   (message (concat "My .emacs loaded in " (emacs-init-time) " seconds.")))

(add-hook 'emacs-startup-hook 'startup-time)
